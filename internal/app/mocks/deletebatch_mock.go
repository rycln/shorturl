// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/handlers/deletebatch.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/rycln/shorturl/internal/app/storage"
)

// MockdeleteBatchStorager is a mock of deleteBatchStorager interface.
type MockdeleteBatchStorager struct {
	ctrl     *gomock.Controller
	recorder *MockdeleteBatchStoragerMockRecorder
}

// MockdeleteBatchStoragerMockRecorder is the mock recorder for MockdeleteBatchStorager.
type MockdeleteBatchStoragerMockRecorder struct {
	mock *MockdeleteBatchStorager
}

// NewMockdeleteBatchStorager creates a new mock instance.
func NewMockdeleteBatchStorager(ctrl *gomock.Controller) *MockdeleteBatchStorager {
	mock := &MockdeleteBatchStorager{ctrl: ctrl}
	mock.recorder = &MockdeleteBatchStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdeleteBatchStorager) EXPECT() *MockdeleteBatchStoragerMockRecorder {
	return m.recorder
}

// DeleteUserURLs mocks base method.
func (m *MockdeleteBatchStorager) DeleteUserURLs(arg0 context.Context, arg1 []storage.DelShortURLs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserURLs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserURLs indicates an expected call of DeleteUserURLs.
func (mr *MockdeleteBatchStoragerMockRecorder) DeleteUserURLs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserURLs", reflect.TypeOf((*MockdeleteBatchStorager)(nil).DeleteUserURLs), arg0, arg1)
}

// MockdeleteBatchConfiger is a mock of deleteBatchConfiger interface.
type MockdeleteBatchConfiger struct {
	ctrl     *gomock.Controller
	recorder *MockdeleteBatchConfigerMockRecorder
}

// MockdeleteBatchConfigerMockRecorder is the mock recorder for MockdeleteBatchConfiger.
type MockdeleteBatchConfigerMockRecorder struct {
	mock *MockdeleteBatchConfiger
}

// NewMockdeleteBatchConfiger creates a new mock instance.
func NewMockdeleteBatchConfiger(ctrl *gomock.Controller) *MockdeleteBatchConfiger {
	mock := &MockdeleteBatchConfiger{ctrl: ctrl}
	mock.recorder = &MockdeleteBatchConfigerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdeleteBatchConfiger) EXPECT() *MockdeleteBatchConfigerMockRecorder {
	return m.recorder
}

// GetKey mocks base method.
func (m *MockdeleteBatchConfiger) GetKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetKey indicates an expected call of GetKey.
func (mr *MockdeleteBatchConfigerMockRecorder) GetKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockdeleteBatchConfiger)(nil).GetKey))
}

// GetTimeoutDuration mocks base method.
func (m *MockdeleteBatchConfiger) GetTimeoutDuration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeoutDuration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetTimeoutDuration indicates an expected call of GetTimeoutDuration.
func (mr *MockdeleteBatchConfigerMockRecorder) GetTimeoutDuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeoutDuration", reflect.TypeOf((*MockdeleteBatchConfiger)(nil).GetTimeoutDuration))
}

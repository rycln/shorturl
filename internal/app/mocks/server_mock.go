// Code generated by MockGen. DO NOT EDIT.
// Source: /mnt/c/wsl/shorturl/internal/app/server/handlers.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/rycln/shorturl/internal/app/storage"
)

// MockurlAdder is a mock of urlAdder interface.
type MockurlAdder struct {
	ctrl     *gomock.Controller
	recorder *MockurlAdderMockRecorder
}

// MockurlAdderMockRecorder is the mock recorder for MockurlAdder.
type MockurlAdderMockRecorder struct {
	mock *MockurlAdder
}

// NewMockurlAdder creates a new mock instance.
func NewMockurlAdder(ctrl *gomock.Controller) *MockurlAdder {
	mock := &MockurlAdder{ctrl: ctrl}
	mock.recorder = &MockurlAdderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockurlAdder) EXPECT() *MockurlAdderMockRecorder {
	return m.recorder
}

// AddBatchURL mocks base method.
func (m *MockurlAdder) AddBatchURL(arg0 context.Context, arg1 []storage.ShortenedURL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBatchURL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBatchURL indicates an expected call of AddBatchURL.
func (mr *MockurlAdderMockRecorder) AddBatchURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBatchURL", reflect.TypeOf((*MockurlAdder)(nil).AddBatchURL), arg0, arg1)
}

// AddURL mocks base method.
func (m *MockurlAdder) AddURL(arg0 context.Context, arg1 storage.ShortenedURL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddURL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddURL indicates an expected call of AddURL.
func (mr *MockurlAdderMockRecorder) AddURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddURL", reflect.TypeOf((*MockurlAdder)(nil).AddURL), arg0, arg1)
}

// MockurlGetter is a mock of urlGetter interface.
type MockurlGetter struct {
	ctrl     *gomock.Controller
	recorder *MockurlGetterMockRecorder
}

// MockurlGetterMockRecorder is the mock recorder for MockurlGetter.
type MockurlGetterMockRecorder struct {
	mock *MockurlGetter
}

// NewMockurlGetter creates a new mock instance.
func NewMockurlGetter(ctrl *gomock.Controller) *MockurlGetter {
	mock := &MockurlGetter{ctrl: ctrl}
	mock.recorder = &MockurlGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockurlGetter) EXPECT() *MockurlGetterMockRecorder {
	return m.recorder
}

// GetOrigURL mocks base method.
func (m *MockurlGetter) GetOrigURL(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrigURL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrigURL indicates an expected call of GetOrigURL.
func (mr *MockurlGetterMockRecorder) GetOrigURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrigURL", reflect.TypeOf((*MockurlGetter)(nil).GetOrigURL), arg0, arg1)
}

// GetShortURL mocks base method.
func (m *MockurlGetter) GetShortURL(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortURL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortURL indicates an expected call of GetShortURL.
func (mr *MockurlGetterMockRecorder) GetShortURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortURL", reflect.TypeOf((*MockurlGetter)(nil).GetShortURL), arg0, arg1)
}

// Mockstorager is a mock of storager interface.
type Mockstorager struct {
	ctrl     *gomock.Controller
	recorder *MockstoragerMockRecorder
}

// MockstoragerMockRecorder is the mock recorder for Mockstorager.
type MockstoragerMockRecorder struct {
	mock *Mockstorager
}

// NewMockstorager creates a new mock instance.
func NewMockstorager(ctrl *gomock.Controller) *Mockstorager {
	mock := &Mockstorager{ctrl: ctrl}
	mock.recorder = &MockstoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorager) EXPECT() *MockstoragerMockRecorder {
	return m.recorder
}

// AddBatchURL mocks base method.
func (m *Mockstorager) AddBatchURL(arg0 context.Context, arg1 []storage.ShortenedURL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBatchURL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBatchURL indicates an expected call of AddBatchURL.
func (mr *MockstoragerMockRecorder) AddBatchURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBatchURL", reflect.TypeOf((*Mockstorager)(nil).AddBatchURL), arg0, arg1)
}

// AddURL mocks base method.
func (m *Mockstorager) AddURL(arg0 context.Context, arg1 storage.ShortenedURL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddURL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddURL indicates an expected call of AddURL.
func (mr *MockstoragerMockRecorder) AddURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddURL", reflect.TypeOf((*Mockstorager)(nil).AddURL), arg0, arg1)
}

// GetOrigURL mocks base method.
func (m *Mockstorager) GetOrigURL(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrigURL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrigURL indicates an expected call of GetOrigURL.
func (mr *MockstoragerMockRecorder) GetOrigURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrigURL", reflect.TypeOf((*Mockstorager)(nil).GetOrigURL), arg0, arg1)
}

// GetShortURL mocks base method.
func (m *Mockstorager) GetShortURL(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortURL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortURL indicates an expected call of GetShortURL.
func (mr *MockstoragerMockRecorder) GetShortURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortURL", reflect.TypeOf((*Mockstorager)(nil).GetShortURL), arg0, arg1)
}

// MockcfgAddresser is a mock of cfgAddresser interface.
type MockcfgAddresser struct {
	ctrl     *gomock.Controller
	recorder *MockcfgAddresserMockRecorder
}

// MockcfgAddresserMockRecorder is the mock recorder for MockcfgAddresser.
type MockcfgAddresserMockRecorder struct {
	mock *MockcfgAddresser
}

// NewMockcfgAddresser creates a new mock instance.
func NewMockcfgAddresser(ctrl *gomock.Controller) *MockcfgAddresser {
	mock := &MockcfgAddresser{ctrl: ctrl}
	mock.recorder = &MockcfgAddresserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcfgAddresser) EXPECT() *MockcfgAddresserMockRecorder {
	return m.recorder
}

// GetBaseAddr mocks base method.
func (m *MockcfgAddresser) GetBaseAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBaseAddr indicates an expected call of GetBaseAddr.
func (mr *MockcfgAddresserMockRecorder) GetBaseAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseAddr", reflect.TypeOf((*MockcfgAddresser)(nil).GetBaseAddr))
}

// GetDatabaseDsn mocks base method.
func (m *MockcfgAddresser) GetDatabaseDsn() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabaseDsn")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDatabaseDsn indicates an expected call of GetDatabaseDsn.
func (mr *MockcfgAddresserMockRecorder) GetDatabaseDsn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseDsn", reflect.TypeOf((*MockcfgAddresser)(nil).GetDatabaseDsn))
}

// MockcfgTimeouter is a mock of cfgTimeouter interface.
type MockcfgTimeouter struct {
	ctrl     *gomock.Controller
	recorder *MockcfgTimeouterMockRecorder
}

// MockcfgTimeouterMockRecorder is the mock recorder for MockcfgTimeouter.
type MockcfgTimeouterMockRecorder struct {
	mock *MockcfgTimeouter
}

// NewMockcfgTimeouter creates a new mock instance.
func NewMockcfgTimeouter(ctrl *gomock.Controller) *MockcfgTimeouter {
	mock := &MockcfgTimeouter{ctrl: ctrl}
	mock.recorder = &MockcfgTimeouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcfgTimeouter) EXPECT() *MockcfgTimeouterMockRecorder {
	return m.recorder
}

// TimeoutDuration mocks base method.
func (m *MockcfgTimeouter) TimeoutDuration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimeoutDuration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// TimeoutDuration indicates an expected call of TimeoutDuration.
func (mr *MockcfgTimeouterMockRecorder) TimeoutDuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeoutDuration", reflect.TypeOf((*MockcfgTimeouter)(nil).TimeoutDuration))
}

// Mockconfiger is a mock of configer interface.
type Mockconfiger struct {
	ctrl     *gomock.Controller
	recorder *MockconfigerMockRecorder
}

// MockconfigerMockRecorder is the mock recorder for Mockconfiger.
type MockconfigerMockRecorder struct {
	mock *Mockconfiger
}

// NewMockconfiger creates a new mock instance.
func NewMockconfiger(ctrl *gomock.Controller) *Mockconfiger {
	mock := &Mockconfiger{ctrl: ctrl}
	mock.recorder = &MockconfigerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockconfiger) EXPECT() *MockconfigerMockRecorder {
	return m.recorder
}

// GetBaseAddr mocks base method.
func (m *Mockconfiger) GetBaseAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBaseAddr indicates an expected call of GetBaseAddr.
func (mr *MockconfigerMockRecorder) GetBaseAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseAddr", reflect.TypeOf((*Mockconfiger)(nil).GetBaseAddr))
}

// GetDatabaseDsn mocks base method.
func (m *Mockconfiger) GetDatabaseDsn() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabaseDsn")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDatabaseDsn indicates an expected call of GetDatabaseDsn.
func (mr *MockconfigerMockRecorder) GetDatabaseDsn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseDsn", reflect.TypeOf((*Mockconfiger)(nil).GetDatabaseDsn))
}

// TimeoutDuration mocks base method.
func (m *Mockconfiger) TimeoutDuration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimeoutDuration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// TimeoutDuration indicates an expected call of TimeoutDuration.
func (mr *MockconfigerMockRecorder) TimeoutDuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeoutDuration", reflect.TypeOf((*Mockconfiger)(nil).TimeoutDuration))
}

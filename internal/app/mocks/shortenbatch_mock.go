// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/handlers/shortenbatch.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/rycln/shorturl/internal/app/storage"
)

// MockbatchStorager is a mock of batchStorager interface.
type MockbatchStorager struct {
	ctrl     *gomock.Controller
	recorder *MockbatchStoragerMockRecorder
}

// MockbatchStoragerMockRecorder is the mock recorder for MockbatchStorager.
type MockbatchStoragerMockRecorder struct {
	mock *MockbatchStorager
}

// NewMockbatchStorager creates a new mock instance.
func NewMockbatchStorager(ctrl *gomock.Controller) *MockbatchStorager {
	mock := &MockbatchStorager{ctrl: ctrl}
	mock.recorder = &MockbatchStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbatchStorager) EXPECT() *MockbatchStoragerMockRecorder {
	return m.recorder
}

// AddBatchURL mocks base method.
func (m *MockbatchStorager) AddBatchURL(arg0 context.Context, arg1 []storage.ShortenedURL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBatchURL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBatchURL indicates an expected call of AddBatchURL.
func (mr *MockbatchStoragerMockRecorder) AddBatchURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBatchURL", reflect.TypeOf((*MockbatchStorager)(nil).AddBatchURL), arg0, arg1)
}

// MockbatchConfiger is a mock of batchConfiger interface.
type MockbatchConfiger struct {
	ctrl     *gomock.Controller
	recorder *MockbatchConfigerMockRecorder
}

// MockbatchConfigerMockRecorder is the mock recorder for MockbatchConfiger.
type MockbatchConfigerMockRecorder struct {
	mock *MockbatchConfiger
}

// NewMockbatchConfiger creates a new mock instance.
func NewMockbatchConfiger(ctrl *gomock.Controller) *MockbatchConfiger {
	mock := &MockbatchConfiger{ctrl: ctrl}
	mock.recorder = &MockbatchConfigerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbatchConfiger) EXPECT() *MockbatchConfigerMockRecorder {
	return m.recorder
}

// GetBaseAddr mocks base method.
func (m *MockbatchConfiger) GetBaseAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBaseAddr indicates an expected call of GetBaseAddr.
func (mr *MockbatchConfigerMockRecorder) GetBaseAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseAddr", reflect.TypeOf((*MockbatchConfiger)(nil).GetBaseAddr))
}

// GetKey mocks base method.
func (m *MockbatchConfiger) GetKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetKey indicates an expected call of GetKey.
func (mr *MockbatchConfigerMockRecorder) GetKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockbatchConfiger)(nil).GetKey))
}

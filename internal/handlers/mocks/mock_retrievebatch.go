// Code generated by MockGen. DO NOT EDIT.
// Source: retrievebatch.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/rycln/shorturl/internal/models"
)

// MockretrieveBatchServicer is a mock of retrieveBatchServicer interface.
type MockretrieveBatchServicer struct {
	ctrl     *gomock.Controller
	recorder *MockretrieveBatchServicerMockRecorder
}

// MockretrieveBatchServicerMockRecorder is the mock recorder for MockretrieveBatchServicer.
type MockretrieveBatchServicerMockRecorder struct {
	mock *MockretrieveBatchServicer
}

// NewMockretrieveBatchServicer creates a new mock instance.
func NewMockretrieveBatchServicer(ctrl *gomock.Controller) *MockretrieveBatchServicer {
	mock := &MockretrieveBatchServicer{ctrl: ctrl}
	mock.recorder = &MockretrieveBatchServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockretrieveBatchServicer) EXPECT() *MockretrieveBatchServicerMockRecorder {
	return m.recorder
}

// GetUserURLs mocks base method.
func (m *MockretrieveBatchServicer) GetUserURLs(arg0 context.Context, arg1 models.UserID) ([]models.URLPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLs", arg0, arg1)
	ret0, _ := ret[0].([]models.URLPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLs indicates an expected call of GetUserURLs.
func (mr *MockretrieveBatchServicerMockRecorder) GetUserURLs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLs", reflect.TypeOf((*MockretrieveBatchServicer)(nil).GetUserURLs), arg0, arg1)
}

// MockretrieveBatchAuthServicer is a mock of retrieveBatchAuthServicer interface.
type MockretrieveBatchAuthServicer struct {
	ctrl     *gomock.Controller
	recorder *MockretrieveBatchAuthServicerMockRecorder
}

// MockretrieveBatchAuthServicerMockRecorder is the mock recorder for MockretrieveBatchAuthServicer.
type MockretrieveBatchAuthServicerMockRecorder struct {
	mock *MockretrieveBatchAuthServicer
}

// NewMockretrieveBatchAuthServicer creates a new mock instance.
func NewMockretrieveBatchAuthServicer(ctrl *gomock.Controller) *MockretrieveBatchAuthServicer {
	mock := &MockretrieveBatchAuthServicer{ctrl: ctrl}
	mock.recorder = &MockretrieveBatchAuthServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockretrieveBatchAuthServicer) EXPECT() *MockretrieveBatchAuthServicerMockRecorder {
	return m.recorder
}

// GetUserIDFromCtx mocks base method.
func (m *MockretrieveBatchAuthServicer) GetUserIDFromCtx(arg0 context.Context) (models.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDFromCtx", arg0)
	ret0, _ := ret[0].(models.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDFromCtx indicates an expected call of GetUserIDFromCtx.
func (mr *MockretrieveBatchAuthServicerMockRecorder) GetUserIDFromCtx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDFromCtx", reflect.TypeOf((*MockretrieveBatchAuthServicer)(nil).GetUserIDFromCtx), arg0)
}

// MockerrRetrieveBatchNotExist is a mock of errRetrieveBatchNotExist interface.
type MockerrRetrieveBatchNotExist struct {
	ctrl     *gomock.Controller
	recorder *MockerrRetrieveBatchNotExistMockRecorder
}

// MockerrRetrieveBatchNotExistMockRecorder is the mock recorder for MockerrRetrieveBatchNotExist.
type MockerrRetrieveBatchNotExistMockRecorder struct {
	mock *MockerrRetrieveBatchNotExist
}

// NewMockerrRetrieveBatchNotExist creates a new mock instance.
func NewMockerrRetrieveBatchNotExist(ctrl *gomock.Controller) *MockerrRetrieveBatchNotExist {
	mock := &MockerrRetrieveBatchNotExist{ctrl: ctrl}
	mock.recorder = &MockerrRetrieveBatchNotExistMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockerrRetrieveBatchNotExist) EXPECT() *MockerrRetrieveBatchNotExistMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockerrRetrieveBatchNotExist) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockerrRetrieveBatchNotExistMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockerrRetrieveBatchNotExist)(nil).Error))
}

// IsErrNotExist mocks base method.
func (m *MockerrRetrieveBatchNotExist) IsErrNotExist() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsErrNotExist")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsErrNotExist indicates an expected call of IsErrNotExist.
func (mr *MockerrRetrieveBatchNotExistMockRecorder) IsErrNotExist() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsErrNotExist", reflect.TypeOf((*MockerrRetrieveBatchNotExist)(nil).IsErrNotExist))
}

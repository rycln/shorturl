// Code generated by MockGen. DO NOT EDIT.
// Source: apishorten.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/rycln/shorturl/internal/models"
)

// MockapiShortenServicer is a mock of apiShortenServicer interface.
type MockapiShortenServicer struct {
	ctrl     *gomock.Controller
	recorder *MockapiShortenServicerMockRecorder
}

// MockapiShortenServicerMockRecorder is the mock recorder for MockapiShortenServicer.
type MockapiShortenServicerMockRecorder struct {
	mock *MockapiShortenServicer
}

// NewMockapiShortenServicer creates a new mock instance.
func NewMockapiShortenServicer(ctrl *gomock.Controller) *MockapiShortenServicer {
	mock := &MockapiShortenServicer{ctrl: ctrl}
	mock.recorder = &MockapiShortenServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockapiShortenServicer) EXPECT() *MockapiShortenServicerMockRecorder {
	return m.recorder
}

// ShortenURL mocks base method.
func (m *MockapiShortenServicer) ShortenURL(arg0 context.Context, arg1 models.UserID, arg2 models.OrigURL) (*models.URLPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortenURL", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.URLPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortenURL indicates an expected call of ShortenURL.
func (mr *MockapiShortenServicerMockRecorder) ShortenURL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenURL", reflect.TypeOf((*MockapiShortenServicer)(nil).ShortenURL), arg0, arg1, arg2)
}

// MockapiShortenAuthServicer is a mock of apiShortenAuthServicer interface.
type MockapiShortenAuthServicer struct {
	ctrl     *gomock.Controller
	recorder *MockapiShortenAuthServicerMockRecorder
}

// MockapiShortenAuthServicerMockRecorder is the mock recorder for MockapiShortenAuthServicer.
type MockapiShortenAuthServicerMockRecorder struct {
	mock *MockapiShortenAuthServicer
}

// NewMockapiShortenAuthServicer creates a new mock instance.
func NewMockapiShortenAuthServicer(ctrl *gomock.Controller) *MockapiShortenAuthServicer {
	mock := &MockapiShortenAuthServicer{ctrl: ctrl}
	mock.recorder = &MockapiShortenAuthServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockapiShortenAuthServicer) EXPECT() *MockapiShortenAuthServicerMockRecorder {
	return m.recorder
}

// GetUserIDFromCtx mocks base method.
func (m *MockapiShortenAuthServicer) GetUserIDFromCtx(arg0 context.Context) (models.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDFromCtx", arg0)
	ret0, _ := ret[0].(models.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDFromCtx indicates an expected call of GetUserIDFromCtx.
func (mr *MockapiShortenAuthServicerMockRecorder) GetUserIDFromCtx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDFromCtx", reflect.TypeOf((*MockapiShortenAuthServicer)(nil).GetUserIDFromCtx), arg0)
}

// MockerrAPIShortenConflict is a mock of errAPIShortenConflict interface.
type MockerrAPIShortenConflict struct {
	ctrl     *gomock.Controller
	recorder *MockerrAPIShortenConflictMockRecorder
}

// MockerrAPIShortenConflictMockRecorder is the mock recorder for MockerrAPIShortenConflict.
type MockerrAPIShortenConflictMockRecorder struct {
	mock *MockerrAPIShortenConflict
}

// NewMockerrAPIShortenConflict creates a new mock instance.
func NewMockerrAPIShortenConflict(ctrl *gomock.Controller) *MockerrAPIShortenConflict {
	mock := &MockerrAPIShortenConflict{ctrl: ctrl}
	mock.recorder = &MockerrAPIShortenConflictMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockerrAPIShortenConflict) EXPECT() *MockerrAPIShortenConflictMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockerrAPIShortenConflict) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockerrAPIShortenConflictMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockerrAPIShortenConflict)(nil).Error))
}

// IsErrConflict mocks base method.
func (m *MockerrAPIShortenConflict) IsErrConflict() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsErrConflict")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsErrConflict indicates an expected call of IsErrConflict.
func (mr *MockerrAPIShortenConflictMockRecorder) IsErrConflict() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsErrConflict", reflect.TypeOf((*MockerrAPIShortenConflict)(nil).IsErrConflict))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: deletebatch.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/rycln/shorturl/internal/models"
)

// MockdeletionProcessor is a mock of deletionProcessor interface.
type MockdeletionProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockdeletionProcessorMockRecorder
}

// MockdeletionProcessorMockRecorder is the mock recorder for MockdeletionProcessor.
type MockdeletionProcessorMockRecorder struct {
	mock *MockdeletionProcessor
}

// NewMockdeletionProcessor creates a new mock instance.
func NewMockdeletionProcessor(ctrl *gomock.Controller) *MockdeletionProcessor {
	mock := &MockdeletionProcessor{ctrl: ctrl}
	mock.recorder = &MockdeletionProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdeletionProcessor) EXPECT() *MockdeletionProcessorMockRecorder {
	return m.recorder
}

// AddURLsIntoDeletionQueue mocks base method.
func (m *MockdeletionProcessor) AddURLsIntoDeletionQueue(arg0 models.UserID, arg1 []models.ShortURL) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddURLsIntoDeletionQueue", arg0, arg1)
}

// AddURLsIntoDeletionQueue indicates an expected call of AddURLsIntoDeletionQueue.
func (mr *MockdeletionProcessorMockRecorder) AddURLsIntoDeletionQueue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddURLsIntoDeletionQueue", reflect.TypeOf((*MockdeletionProcessor)(nil).AddURLsIntoDeletionQueue), arg0, arg1)
}

// MockdeleteBatchAuthServicer is a mock of deleteBatchAuthServicer interface.
type MockdeleteBatchAuthServicer struct {
	ctrl     *gomock.Controller
	recorder *MockdeleteBatchAuthServicerMockRecorder
}

// MockdeleteBatchAuthServicerMockRecorder is the mock recorder for MockdeleteBatchAuthServicer.
type MockdeleteBatchAuthServicerMockRecorder struct {
	mock *MockdeleteBatchAuthServicer
}

// NewMockdeleteBatchAuthServicer creates a new mock instance.
func NewMockdeleteBatchAuthServicer(ctrl *gomock.Controller) *MockdeleteBatchAuthServicer {
	mock := &MockdeleteBatchAuthServicer{ctrl: ctrl}
	mock.recorder = &MockdeleteBatchAuthServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdeleteBatchAuthServicer) EXPECT() *MockdeleteBatchAuthServicerMockRecorder {
	return m.recorder
}

// GetUserIDFromCtx mocks base method.
func (m *MockdeleteBatchAuthServicer) GetUserIDFromCtx(arg0 context.Context) (models.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDFromCtx", arg0)
	ret0, _ := ret[0].(models.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDFromCtx indicates an expected call of GetUserIDFromCtx.
func (mr *MockdeleteBatchAuthServicerMockRecorder) GetUserIDFromCtx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDFromCtx", reflect.TypeOf((*MockdeleteBatchAuthServicer)(nil).GetUserIDFromCtx), arg0)
}

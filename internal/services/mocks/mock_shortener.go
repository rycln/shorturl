// Code generated by MockGen. DO NOT EDIT.
// Source: shortener.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/rycln/shorturl/internal/models"
)

// MockurlSaver is a mock of urlSaver interface.
type MockurlSaver struct {
	ctrl     *gomock.Controller
	recorder *MockurlSaverMockRecorder
}

// MockurlSaverMockRecorder is the mock recorder for MockurlSaver.
type MockurlSaverMockRecorder struct {
	mock *MockurlSaver
}

// NewMockurlSaver creates a new mock instance.
func NewMockurlSaver(ctrl *gomock.Controller) *MockurlSaver {
	mock := &MockurlSaver{ctrl: ctrl}
	mock.recorder = &MockurlSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockurlSaver) EXPECT() *MockurlSaverMockRecorder {
	return m.recorder
}

// AddURLPair mocks base method.
func (m *MockurlSaver) AddURLPair(arg0 context.Context, arg1 *models.URLPair) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddURLPair", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddURLPair indicates an expected call of AddURLPair.
func (mr *MockurlSaverMockRecorder) AddURLPair(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddURLPair", reflect.TypeOf((*MockurlSaver)(nil).AddURLPair), arg0, arg1)
}

// MockurlFetcher is a mock of urlFetcher interface.
type MockurlFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockurlFetcherMockRecorder
}

// MockurlFetcherMockRecorder is the mock recorder for MockurlFetcher.
type MockurlFetcherMockRecorder struct {
	mock *MockurlFetcher
}

// NewMockurlFetcher creates a new mock instance.
func NewMockurlFetcher(ctrl *gomock.Controller) *MockurlFetcher {
	mock := &MockurlFetcher{ctrl: ctrl}
	mock.recorder = &MockurlFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockurlFetcher) EXPECT() *MockurlFetcherMockRecorder {
	return m.recorder
}

// GetURLPairByShort mocks base method.
func (m *MockurlFetcher) GetURLPairByShort(arg0 context.Context, arg1 models.ShortURL) (*models.URLPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLPairByShort", arg0, arg1)
	ret0, _ := ret[0].(*models.URLPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLPairByShort indicates an expected call of GetURLPairByShort.
func (mr *MockurlFetcherMockRecorder) GetURLPairByShort(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLPairByShort", reflect.TypeOf((*MockurlFetcher)(nil).GetURLPairByShort), arg0, arg1)
}

// MockShortenerStorage is a mock of ShortenerStorage interface.
type MockShortenerStorage struct {
	ctrl     *gomock.Controller
	recorder *MockShortenerStorageMockRecorder
}

// MockShortenerStorageMockRecorder is the mock recorder for MockShortenerStorage.
type MockShortenerStorageMockRecorder struct {
	mock *MockShortenerStorage
}

// NewMockShortenerStorage creates a new mock instance.
func NewMockShortenerStorage(ctrl *gomock.Controller) *MockShortenerStorage {
	mock := &MockShortenerStorage{ctrl: ctrl}
	mock.recorder = &MockShortenerStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortenerStorage) EXPECT() *MockShortenerStorageMockRecorder {
	return m.recorder
}

// AddURLPair mocks base method.
func (m *MockShortenerStorage) AddURLPair(arg0 context.Context, arg1 *models.URLPair) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddURLPair", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddURLPair indicates an expected call of AddURLPair.
func (mr *MockShortenerStorageMockRecorder) AddURLPair(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddURLPair", reflect.TypeOf((*MockShortenerStorage)(nil).AddURLPair), arg0, arg1)
}

// GetURLPairByShort mocks base method.
func (m *MockShortenerStorage) GetURLPairByShort(arg0 context.Context, arg1 models.ShortURL) (*models.URLPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLPairByShort", arg0, arg1)
	ret0, _ := ret[0].(*models.URLPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLPairByShort indicates an expected call of GetURLPairByShort.
func (mr *MockShortenerStorageMockRecorder) GetURLPairByShort(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLPairByShort", reflect.TypeOf((*MockShortenerStorage)(nil).GetURLPairByShort), arg0, arg1)
}

// Mockhasher is a mock of hasher interface.
type Mockhasher struct {
	ctrl     *gomock.Controller
	recorder *MockhasherMockRecorder
}

// MockhasherMockRecorder is the mock recorder for Mockhasher.
type MockhasherMockRecorder struct {
	mock *Mockhasher
}

// NewMockhasher creates a new mock instance.
func NewMockhasher(ctrl *gomock.Controller) *Mockhasher {
	mock := &Mockhasher{ctrl: ctrl}
	mock.recorder = &MockhasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockhasher) EXPECT() *MockhasherMockRecorder {
	return m.recorder
}

// GenerateHashFromURL mocks base method.
func (m *Mockhasher) GenerateHashFromURL(arg0 models.OrigURL) models.ShortURL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateHashFromURL", arg0)
	ret0, _ := ret[0].(models.ShortURL)
	return ret0
}

// GenerateHashFromURL indicates an expected call of GenerateHashFromURL.
func (mr *MockhasherMockRecorder) GenerateHashFromURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateHashFromURL", reflect.TypeOf((*Mockhasher)(nil).GenerateHashFromURL), arg0)
}

// MockerrConflict is a mock of errConflict interface.
type MockerrConflict struct {
	ctrl     *gomock.Controller
	recorder *MockerrConflictMockRecorder
}

// MockerrConflictMockRecorder is the mock recorder for MockerrConflict.
type MockerrConflictMockRecorder struct {
	mock *MockerrConflict
}

// NewMockerrConflict creates a new mock instance.
func NewMockerrConflict(ctrl *gomock.Controller) *MockerrConflict {
	mock := &MockerrConflict{ctrl: ctrl}
	mock.recorder = &MockerrConflictMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockerrConflict) EXPECT() *MockerrConflictMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockerrConflict) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockerrConflictMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockerrConflict)(nil).Error))
}

// IsConflict mocks base method.
func (m *MockerrConflict) IsConflict() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConflict")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConflict indicates an expected call of IsConflict.
func (mr *MockerrConflictMockRecorder) IsConflict() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConflict", reflect.TypeOf((*MockerrConflict)(nil).IsConflict))
}

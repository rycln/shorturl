// Code generated by MockGen. DO NOT EDIT.
// Source: batchshortener.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/rycln/shorturl/internal/models"
)

// MockbatchURLSaver is a mock of batchURLSaver interface.
type MockbatchURLSaver struct {
	ctrl     *gomock.Controller
	recorder *MockbatchURLSaverMockRecorder
}

// MockbatchURLSaverMockRecorder is the mock recorder for MockbatchURLSaver.
type MockbatchURLSaverMockRecorder struct {
	mock *MockbatchURLSaver
}

// NewMockbatchURLSaver creates a new mock instance.
func NewMockbatchURLSaver(ctrl *gomock.Controller) *MockbatchURLSaver {
	mock := &MockbatchURLSaver{ctrl: ctrl}
	mock.recorder = &MockbatchURLSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbatchURLSaver) EXPECT() *MockbatchURLSaverMockRecorder {
	return m.recorder
}

// AddBatchURLPairs mocks base method.
func (m *MockbatchURLSaver) AddBatchURLPairs(arg0 context.Context, arg1 []models.URLPair) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBatchURLPairs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBatchURLPairs indicates an expected call of AddBatchURLPairs.
func (mr *MockbatchURLSaverMockRecorder) AddBatchURLPairs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBatchURLPairs", reflect.TypeOf((*MockbatchURLSaver)(nil).AddBatchURLPairs), arg0, arg1)
}

// MockbatchURLFetcher is a mock of batchURLFetcher interface.
type MockbatchURLFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockbatchURLFetcherMockRecorder
}

// MockbatchURLFetcherMockRecorder is the mock recorder for MockbatchURLFetcher.
type MockbatchURLFetcherMockRecorder struct {
	mock *MockbatchURLFetcher
}

// NewMockbatchURLFetcher creates a new mock instance.
func NewMockbatchURLFetcher(ctrl *gomock.Controller) *MockbatchURLFetcher {
	mock := &MockbatchURLFetcher{ctrl: ctrl}
	mock.recorder = &MockbatchURLFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbatchURLFetcher) EXPECT() *MockbatchURLFetcherMockRecorder {
	return m.recorder
}

// GetURLPairBatchByUserID mocks base method.
func (m *MockbatchURLFetcher) GetURLPairBatchByUserID(arg0 context.Context, arg1 models.UserID) ([]models.URLPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLPairBatchByUserID", arg0, arg1)
	ret0, _ := ret[0].([]models.URLPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLPairBatchByUserID indicates an expected call of GetURLPairBatchByUserID.
func (mr *MockbatchURLFetcherMockRecorder) GetURLPairBatchByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLPairBatchByUserID", reflect.TypeOf((*MockbatchURLFetcher)(nil).GetURLPairBatchByUserID), arg0, arg1)
}

// MockBatchShortenerStorage is a mock of BatchShortenerStorage interface.
type MockBatchShortenerStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBatchShortenerStorageMockRecorder
}

// MockBatchShortenerStorageMockRecorder is the mock recorder for MockBatchShortenerStorage.
type MockBatchShortenerStorageMockRecorder struct {
	mock *MockBatchShortenerStorage
}

// NewMockBatchShortenerStorage creates a new mock instance.
func NewMockBatchShortenerStorage(ctrl *gomock.Controller) *MockBatchShortenerStorage {
	mock := &MockBatchShortenerStorage{ctrl: ctrl}
	mock.recorder = &MockBatchShortenerStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchShortenerStorage) EXPECT() *MockBatchShortenerStorageMockRecorder {
	return m.recorder
}

// AddBatchURLPairs mocks base method.
func (m *MockBatchShortenerStorage) AddBatchURLPairs(arg0 context.Context, arg1 []models.URLPair) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBatchURLPairs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBatchURLPairs indicates an expected call of AddBatchURLPairs.
func (mr *MockBatchShortenerStorageMockRecorder) AddBatchURLPairs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBatchURLPairs", reflect.TypeOf((*MockBatchShortenerStorage)(nil).AddBatchURLPairs), arg0, arg1)
}

// GetURLPairBatchByUserID mocks base method.
func (m *MockBatchShortenerStorage) GetURLPairBatchByUserID(arg0 context.Context, arg1 models.UserID) ([]models.URLPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLPairBatchByUserID", arg0, arg1)
	ret0, _ := ret[0].([]models.URLPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLPairBatchByUserID indicates an expected call of GetURLPairBatchByUserID.
func (mr *MockBatchShortenerStorageMockRecorder) GetURLPairBatchByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLPairBatchByUserID", reflect.TypeOf((*MockBatchShortenerStorage)(nil).GetURLPairBatchByUserID), arg0, arg1)
}

// MockbatchHasher is a mock of batchHasher interface.
type MockbatchHasher struct {
	ctrl     *gomock.Controller
	recorder *MockbatchHasherMockRecorder
}

// MockbatchHasherMockRecorder is the mock recorder for MockbatchHasher.
type MockbatchHasherMockRecorder struct {
	mock *MockbatchHasher
}

// NewMockbatchHasher creates a new mock instance.
func NewMockbatchHasher(ctrl *gomock.Controller) *MockbatchHasher {
	mock := &MockbatchHasher{ctrl: ctrl}
	mock.recorder = &MockbatchHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbatchHasher) EXPECT() *MockbatchHasherMockRecorder {
	return m.recorder
}

// GenerateHashFromURL mocks base method.
func (m *MockbatchHasher) GenerateHashFromURL(arg0 models.OrigURL) models.ShortURL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateHashFromURL", arg0)
	ret0, _ := ret[0].(models.ShortURL)
	return ret0
}

// GenerateHashFromURL indicates an expected call of GenerateHashFromURL.
func (mr *MockbatchHasherMockRecorder) GenerateHashFromURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateHashFromURL", reflect.TypeOf((*MockbatchHasher)(nil).GenerateHashFromURL), arg0)
}
